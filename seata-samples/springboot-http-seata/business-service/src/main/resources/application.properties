spring.application.name=business-service
server.port=9090

#logging.level.root=debug
logging.level.io.seata=info
#打印sql
logging.level.com.work.business.repository=debug

# 不用注册中心，直连 seata 服务端配置
seata.service.grouplist.springboot_http_cluster=127.0.0.1:8091

# seata 服务分组
seata.tx-service-group=springboot_http_tx_group
seata.service.vgroup-mapping.springboot_http_tx_group=springboot_http_cluster


## 使用eureka配置
#seata.registry.type=eureka
#seata.registry.eureka.service-url=http://localhost:8000/eureka
#
## seata 服务分组
#seata.tx-service-group=springboot_http_tx_group
#seata.service.vgroup-mapping.springboot_http_tx_group=default


## seata 服务分组
#seata.tx-service-group=springboot_http_tx_group_a
## 模拟seata.registry.type=file时的 注册中心，服务地址
#seata.service.vgroup-mapping.springboot_http_tx_group_a=springboot_http_cluster_a
#seata.service.grouplist.springboot_http_cluster_a=127.0.0.1:8091
#
## 模拟seata.registry.type=file时的 注册中心，服务地址
#seata.service.vgroup-mapping.springboot_http_tx_group_b=springboot_http_cluster_b
#seata.service.grouplist.springboot_http_cluster_b=127.0.0.1:8092


# https://seata.io/zh-cn/docs/user/configurations.html
# registry.type=file或config.type=file 设计的初衷是让用户再不依赖第三方注册中心或配置中心的前提下，通过直连的方式，快速验证seata服务。
# https://github.com/seata/seata/blob/master/script/client/spring/application.properties
# 默认都是file
#seata.config.type=file
#seata.registry.type=file

# 这个配置是否设置或者随便设置文件( xxx.conf )都没影响，因为配置最终都被覆盖了
#seata.config.file.name=xxx.conf

